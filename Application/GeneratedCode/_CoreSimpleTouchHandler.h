/*******************************************************************************
*
* E M B E D D E D   W I Z A R D   P R O J E C T
*
*                                                Copyright (c) TARA Systems GmbH
*                                    written by Paul Banach and Manfred Schweyer
*
********************************************************************************
*
* This file was generated automatically by Embedded Wizard Studio.
*
* Please do not make any modifications of this file! The modifications are lost
* when the file is generated again by Embedded Wizard Studio!
*
* The template of this heading text can be found in the file 'head.ewt' in the
* directory 'Platforms' of your Embedded Wizard installation directory. If you
* wish to adapt this text, please copy the template file 'head.ewt' into your
* project directory and edit the copy only. Please avoid any modifications of
* the original template file!
*
* Version  : 11.00
* Profile  : STM32F429
* Platform : STM.STM32.RGB565
*
*******************************************************************************/

#ifndef _CoreSimpleTouchHandler_H
#define _CoreSimpleTouchHandler_H

#ifdef __cplusplus
  extern "C"
  {
#endif

#include "ewrte.h"
#if EW_RTE_VERSION != 0x000B0000
  #error Wrong version of Embedded Wizard Runtime Environment.
#endif

#include "ewgfx.h"
#if EW_GFX_VERSION != 0x000B0000
  #error Wrong version of Embedded Wizard Graphics Engine.
#endif

#include "_CoreQuadView.h"

/* Forward declaration of the class Core::CursorHit */
#ifndef _CoreCursorHit_
  EW_DECLARE_CLASS( CoreCursorHit )
#define _CoreCursorHit_
#endif

/* Forward declaration of the class Core::Event */
#ifndef _CoreEvent_
  EW_DECLARE_CLASS( CoreEvent )
#define _CoreEvent_
#endif

/* Forward declaration of the class Core::Group */
#ifndef _CoreGroup_
  EW_DECLARE_CLASS( CoreGroup )
#define _CoreGroup_
#endif

/* Forward declaration of the class Core::LayoutContext */
#ifndef _CoreLayoutContext_
  EW_DECLARE_CLASS( CoreLayoutContext )
#define _CoreLayoutContext_
#endif

/* Forward declaration of the class Core::SimpleTouchHandler */
#ifndef _CoreSimpleTouchHandler_
  EW_DECLARE_CLASS( CoreSimpleTouchHandler )
#define _CoreSimpleTouchHandler_
#endif

/* Forward declaration of the class Core::View */
#ifndef _CoreView_
  EW_DECLARE_CLASS( CoreView )
#define _CoreView_
#endif

/* Forward declaration of the class Graphics::Canvas */
#ifndef _GraphicsCanvas_
  EW_DECLARE_CLASS( GraphicsCanvas )
#define _GraphicsCanvas_
#endif


/* The class Core::SimpleTouchHandler provides a special kind of a view able to 
   react to touch screen events. Each time the user taps inside the area of the 
   handler view, the handler send signals to slot methods stored in its various 
   properties. For example, if there is a slot method assigned to the property @OnPress, 
   the handler will send a signal to this slot method as soon as the user has touched 
   the handler view area. The intention of this handler is to cover the internal 
   aspects of the cursor event handling.
   The simple touch handler recognizes the tap and drag operations only. More sophisticated 
   gesture handlers are available in other classes, e.g. Core::RotateTouchHandler 
   is able to recognize the rotation gesture.
   The touch area can assume any quad shape (4 corners polygon). Each corner can 
   be placed separately by the @Point1 .. @Point4 properties. In this manner fancy, 
   non rectangular touch areas can be determined.
   The handler provides several variables useful to query e.g. the current touch 
   position (@CurrentPos), etc. These variables can be simply evaluated in the implementation 
   of the slot method.
   If this handler is intended to process multi-touch events (the property @EnableMultiTouch 
   is 'true' and the target system can feed the application with multi-touch events) 
   you should additionally evaluate the variable @Finger, which helps you to distinguish 
   the touch events. Alternatively, the handler can be configured to react to multi-touch 
   gestures (e.g. two finger taps) performed by two or more fingers by specifying 
   the expected number of fingers in the property @NoOfFingers. With the property 
   @LimitToFinger the handler can be limited to react to events generated by a particular 
   finger only.
   The property @Enabled can be used to activate/deactivate the touch handler. Disabled 
   handler will not react to user taps.
   With the properties @RetargetCondition, @RetargetOffset and @RetargetDelay the 
   handler can be configured to automatically deflect the current event processing 
   to another handler as soon as the user has performed a simple gesture, e.g. wipe 
   down. Using these properties several handler can cooperate during an active user 
   interaction even if these handler overlap each other. For example, one handler 
   can process horizontal gestures while another handler will limit to vertical 
   gestures, etc.
   Due to its ancestry from the Core::View class, the touch handler can be arranged 
   within its @Owner or if @Embedded == 'true' within the boundary area of an Core::Outline 
   view in the same manner as it is done with all regular views.
   The touch handler itself is invisible except the Embedded Wizard Composer, where 
   all handler appear as semitransparent quads. This allows you to interact with 
   the handlers during the design time. */
EW_DEFINE_FIELDS( CoreSimpleTouchHandler, CoreQuadView )
  /* The property 'OnLeave' can refer to a slot method, which should be invoked 
     by the handler when while dragging the finger the user has left the handler 
     area.
     It's up to you to provide the slot method and to fill it with the desired behavior. 
     Within the slot method the current state of the handler variables like @CurrentPos, 
     @Inside, etc. can be evaluated. If this property is 'null', no method is invoked.
     If this handler is intended to process multi-touch events (the property @EnableMultiTouch 
     is 'true' and the target system can feed the application with multi-touch events) 
     you should additionally evaluate the variable @Finger, which helps you to distinguish 
     the touch events. */
  EW_PROPERTY( OnLeave,         XSlot )

  /* The property 'OnEnter' can refer to a slot method, which should be invoked 
     by the handler when while dragging the finger the user has entered the handler 
     area.
     It's up to you to provide the slot method and to fill it with the desired behavior. 
     Within the slot method the current state of the handler variables like @CurrentPos, 
     @Inside, etc. can be evaluated. If this property is 'null', no method is invoked.
     If this handler is intended to process multi-touch events (the property @EnableMultiTouch 
     is 'true' and the target system can feed the application with multi-touch events) 
     you should additionally evaluate the variable @Finger, which helps you to distinguish 
     the touch events. */
  EW_PROPERTY( OnEnter,         XSlot )

  /* The property 'OnRelease' can refer to a slot method, which should be invoked 
     by the handler after the user has finished the touch interaction or the cursor 
     event flow was redirected to another target view by an explicit invocation 
     of the method Core::Root.DeflectCursor() or Core::Root.RetargetCursor().
     It's up to you to provide the slot method and to fill it with the desired behavior. 
     Within the slot method the current state of the handler variables like @Inside, 
     @HoldPeriod, @AutoDeflected, etc. can be evaluated. If this property is 'null', 
     no method is invoked.
     If this handler is intended to process multi-touch events (the property @EnableMultiTouch 
     is 'true' and the target system can feed the application with multi-touch events) 
     you should additionally evaluate the variable @Finger, which helps you to distinguish 
     the touch events. */
  EW_PROPERTY( OnRelease,       XSlot )

  /* The property 'OnPress' can refer to a slot method, which should be invoked 
     by the handler after the user has tapped it on the screen. This occurs at the 
     beginning of the touch interaction. Afterwards the handler may invoke other 
     methods referred by the properties @OnDrag, @OnEnter, @OrLeave or @OnHold. 
     At the end, when the user finishes the interaction, the method stored in the 
     property @OnRelease is invoked.
     It's up to you to provide the slot method and to fill it with the desired behavior. 
     Within the slot method the current state of the handler variables like @HittingPos, 
     @HoldPeriod, etc. can be evaluated. If this property is 'null', no method is 
     invoked.
     If this handler is intended to process multi-touch events (the property @EnableMultiTouch 
     is 'true' and the target system can feed the application with multi-touch events) 
     you should additionally evaluate the variable @Finger, which helps you to distinguish 
     the touch events. */
  EW_PROPERTY( OnPress,         XSlot )
  EW_VARIABLE( state,           XUInt32 )

  /* The variable 'Finger' stores the number of the finger associated with the current 
     touch event. This can be useful if the handler is intended to handle multi-touch 
     events. The fingers are numbered with values lying in the range 0 .. 9. */
  EW_VARIABLE( Finger,          XInt32 )

  /* The variable 'Time' stores the time in milliseconds when the user has tapped 
     the handler area or dragged the finger for the last time. This can be useful 
     if you e.g. need to calculate the speed with which the user is dragging the 
     finger, etc. */
  EW_VARIABLE( Time,            XUInt32 )

  /* The variable 'StrikeCount' stores how often the user has tapped the handler 
     in succession. It is one, if the user has single tapped it. It is two if a 
     double tap took place, and so far.
     Such series of taps are recognized only when the taps are performed very quickly 
     and the user doesn't move the finger very much. The appropriate time delay 
     and the valid range for the movement are determined by the properties CursorDragLimit 
     and CursorSequelDelay of the class Core::Root. */
  EW_VARIABLE( StrikeCount,     XInt32 )

  /* The variable 'HoldPeriod' stores the time in milliseconds how long the user 
     is pressing the finger on the screen. This variable is useful if a delay between 
     the tap and the reaction to the tap is desired. At the begin of the interaction 
     Time == 0. */
  EW_VARIABLE( HoldPeriod,      XInt32 )

  /* The variable 'Offset' stores the cursor displacement since the last drag operation. */
  EW_VARIABLE( Offset,          XPoint )

  /* The variable 'HittingPos' stores the position where the user has touched the 
     screen at the beginning of the interaction. This position is valid in the coordinate 
     space of the @Owner of this handler. */
  EW_VARIABLE( HittingPos,      XPoint )

  /* The variable 'CurrentPos' stores the current cursor position. This position 
     is valid in the coordinate space of the @Owner of this handler. */
  EW_VARIABLE( CurrentPos,      XPoint )

  /* The property 'RetargetOffset' determines the minimal distance the user has 
     to drag the finger (or the mouse pointer) vertically or horizontally in order 
     to recognize the WipeUp, WipeDown, WipeLeft or WipeRight gestures, which are 
     enabled in @RetargetCondition property. The value of this property is expressed 
     in pixel. */
  EW_PROPERTY( RetargetOffset,  XInt32 )

  /* The property 'MaxStrikeCount' determines the upper limit for taps in series 
     which will be considered by the handler. The value one corresponds to a single 
     tap. The value two to a double tap, and so far. This is like a filter. */
  EW_PROPERTY( MaxStrikeCount,  XInt32 )

  /* The variable 'Down' determines whether the user is still touching the screen. 
     If this variable == 'false' the user has finished the interaction. */
  EW_VARIABLE( Down,            XBool )

  /* The variable 'Inside' informs whether the user currently does point with his 
     finger inside the handler area or not. If 'true' the users finger lies inside 
     the area. Dragging the finger outside the area will change the variable to 
     'false'. */
  EW_VARIABLE( Inside,          XBool )

  /* The variable 'AutoDeflected' is 'true', if the interaction with the handler 
     has been terminated by deflecting the cursor event flow to another target. 
     This can occur if method Core::Root.DeflectCursor() or Core::Root.RetargetCursor() 
     was used. These methods make possible to hand over the cursor from the current 
     target view to another view. */
  EW_VARIABLE( AutoDeflected,   XBool )
EW_END_OF_FIELDS( CoreSimpleTouchHandler )

/* Virtual Method Table (VMT) for the class : 'Core::SimpleTouchHandler' */
EW_DEFINE_METHODS( CoreSimpleTouchHandler, CoreQuadView )
  EW_METHOD( initLayoutContext, void )( CoreQuadView _this, XRect aBounds, CoreOutline 
    aOutline )

  /* The method GetRoot() delivers the application object, this view belongs to. 
     The application object represents the entire screen of the GUI application. 
     Thus in the views hierarchy, the application object serves as the root view.
     This method can fail and return null if the view still doesn't belong to any 
     owner group. */
  EW_METHOD( GetRoot,           CoreRoot )( CoreView _this )

  /* The method Draw() is invoked automatically if parts of the view should be redrawn 
     on the screen. This can occur when e.g. the view has been moved or the appearance 
     of the view has changed before.
     Draw() is invoked automatically by the framework, you never will need to invoke 
     this method directly. However you can request an invocation of this method 
     by calling the method InvalidateArea() of the views @Owner. Usually this is 
     also unnecessary unless you are developing your own view.
     The passed parameters determine the drawing destination aCanvas and the area 
     to redraw aClip in the coordinate space of the canvas. The parameter aOffset 
     contains the displacement between the origin of the views owner and the origin 
     of the canvas. You will need it to convert views coordinates into these of 
     the canvas.
     The parameter aOpacity contains the opacity descended from this view's @Owner. 
     It lies in range 0 .. 255. If the view implements its own 'Opacity', 'Color', 
     etc. properties, the Draw() method should calculate the resulting real opacity 
     by mixing the values of these properties with the one passed in aOpacity parameter.
     The parameter aBlend contains the blending mode descended from this view's 
     @Owner. It determines, whether the view should be drawn with alpha-blending 
     active or not. If aBlend is false, the outputs of the view should overwrite 
     the corresponding pixel in the drawing destination aCanvas. If aBlend is true, 
     the outputs should be mixed with the pixel already stored in aCanvas. For this 
     purpose all Graphics Engine functions provide a parameter to specify the mode 
     for the respective drawing operation. If the view implements its own 'Blend' 
     property, the Draw() method should calculate the resulting real blend mode 
     by using logical AND operation of the value of the property and the one passed 
     in aBlend parameter. */
  EW_METHOD( Draw,              void )( CoreSimpleTouchHandler _this, GraphicsCanvas 
    aCanvas, XRect aClip, XPoint aOffset, XInt32 aOpacity, XBool aBlend )

  /* The method HandleEvent() is invoked automatically if the view has received 
     an event. For example, touching the view on the touch screen can cause the 
     view to receive a Core::CursorEvent event. Within this method the view can 
     evaluate the event and react to it.
     Whether the event has been handled by the view or not is determined by the 
     return value. To sign an event as handled HandleEvent() should return a valid 
     object (e.g. 'this'). If the event has not been handled, 'null' should be returned.
     Depending on the kind of the event, the framework can continue dispatching 
     of still unhandled events. For example, keyboard events (Core::KeyEvent class) 
     are automatically delivered to the superior @Owner of the receiver view if 
     this view has ignored the event.
     HandleEvent() is invoked automatically by the framework, so you never should 
     need to invoke it directly. However you can prepare and post new events by 
     using the methods DispatchEvent() and BroadcastEvent() of the application class 
     Core::Root. */
  EW_METHOD( HandleEvent,       XObject )( CoreSimpleTouchHandler _this, CoreEvent 
    aEvent )

  /* The method CursorHitTest() is invoked automatically in order to determine whether 
     the view is interested in the receipt of cursor events or not. This method 
     will be invoked immediately after the user has tapped the visible area of the 
     view. If the view is not interested in the cursor event, the framework repeats 
     this procedure for the next behind view until a willing view has been found 
     or all views are evaluated.
     In the implementation of the method the view can evaluate the passed aArea 
     parameter. It determines the place where the user has tapped the view with 
     his fingertip expressed in the coordinates of the views @Owner. The method 
     can test e.g. whether the tapped area does intersect any touchable areas within 
     the view, etc. The affected finger is identified in the parameter aFinger. 
     The first finger (or the first mouse device button) has the number 0.
     The parameter aStrikeCount determines how many times the same area has been 
     tapped in series. This is useful to detect series of multiple touches, e.g. 
     in case of the double click, aStrikeCount == 2.
     The parameter aDedicatedView, if it is not 'null', restricts the event to be 
     handled by this view only. If aDedicatedView == null, no special restriction 
     exists.
     This method is also invoked if during an existing grab cycle the current target 
     view has decided to resign and deflect the cursor events to another view. This 
     is usually the case after the user has performed a gesture the current target 
     view is not interested to process. Thereupon, the system looks for another 
     view willing to take over the cursor event processing after the performed gesture. 
     Which gesture has caused the operation, is specified in the parameter aRetargetReason.
     If the view is willing to process the event, the method should create, initialize 
     and return a new Core::CursorHit object. This object identify the willing view. 
     Otherwise the method should return 'null'.
     CursorHitTest() is invoked automatically by the framework, so you never should 
     need to invoke it directly. This method is predetermined for the hit-test only. 
     The proper processing of events should take place in the @HandleEvent() method 
     by reacting to Core::CursorEvent and Core::DragEvent events. */
  EW_METHOD( CursorHitTest,     CoreCursorHit )( CoreSimpleTouchHandler _this, XRect 
    aArea, XInt32 aFinger, XInt32 aStrikeCount, CoreView aDedicatedView, XSet aRetargetReason )

  /* The method ArrangeView() is invoked automatically if the superior @Owner group 
     needs to re-arrange its views. For example, the changing of the owners size 
     can cause the enclosed views to adapt their position and size, so all views 
     still fit within the new owners area. This method provides the core functionality 
     for the automatic GUI layout mechanism.
     The arrangement is controlled primarily by the @Layout property of the view. 
     It specifies a set of alignment constraints and determines whether the view 
     can change its size. The bounds area where the view should be arranged, is 
     passed in the parameter aBounds. This is usually the current area of the views 
     owner.
     The parameter aFormation defines the desired arrangement mode. Depending on 
     the value of this parameter, the views can be arranged in rows or columns. 
     If aFormation == Core::Formation.None, no automatic row/column arrangement 
     is performed and the view is moved and scaled only to fit inside the aBounds 
     area.
     ArrangeView() is invoked automatically by the framework, so you never should 
     need to invoke it directly.
     The method returns the size of the view after it has been arranged. */
  EW_METHOD( ArrangeView,       XPoint )( CoreQuadView _this, XRect aBounds, XEnum 
    aFormation )

  /* The method MoveView() changes the position of the view by adding the value 
     aOffset to all corners of the view. For example, in case of a line view the 
     value is added to the both line end points.
     The parameter aFastMove serves for the optimization purpose. If it is 'true', 
     the corners are modified without performing any updates of the view and without 
     redrawing the screen. This is useful, when you wish to move or arrange a lot 
     of views at once. In this case it's up to you to request the finally screen 
     update. To do this you can use the method InvalidateArea() of the views @Owner.
     In the case aFastMove == false, the operation automatically requests the screen 
     redraw of the view areas before and after the movement. You don't need to take 
     care about it. */
  EW_METHOD( MoveView,          void )( CoreQuadView _this, XPoint aOffset, XBool 
    aFastMove )

  /* The method GetExtent() returns the position and the size of the view relative 
     to the origin of its @Owner. In case of views with a non rectangular shape 
     the method returns the rectangular boundary area enclosing the entire shape. */
  EW_METHOD( GetExtent,         XRect )( CoreQuadView _this )

  /* The method ChangeViewState() modifies the current state of the view. The state 
     is a set of switches determining whether a view is visible, whether it can 
     react to user inputs or whether it is just performing some update operations, 
     etc.
     The modification is controlled by the the both parameters. The first aSetState 
     contains the switches to activate within the view state. The second aClearState 
     determines all switches to disable.
     Depending on the state alteration the method will perform different operations, 
     e.g. in response to the clearing of the visible state, the method will request 
     a screen redraw to make disappear the view from the screen.
     ChangeViewState() is invoked automatically by the framework, so you never should 
     need to invoke it directly. All relevant states are available as properties 
     e.g. the property Visible in derived classes reflects the visible state of 
     the view. */
  EW_METHOD( ChangeViewState,   void )( CoreView _this, XSet aSetState, XSet aClearState )
  EW_METHOD( OnSetPoint4,       void )( CoreQuadView _this, XPoint value )
  EW_METHOD( OnSetPoint3,       void )( CoreQuadView _this, XPoint value )
  EW_METHOD( OnSetPoint2,       void )( CoreQuadView _this, XPoint value )
  EW_METHOD( OnSetPoint1,       void )( CoreQuadView _this, XPoint value )
EW_END_OF_METHODS( CoreSimpleTouchHandler )

/* The method Draw() is invoked automatically if parts of the view should be redrawn 
   on the screen. This can occur when e.g. the view has been moved or the appearance 
   of the view has changed before.
   Draw() is invoked automatically by the framework, you never will need to invoke 
   this method directly. However you can request an invocation of this method by 
   calling the method InvalidateArea() of the views @Owner. Usually this is also 
   unnecessary unless you are developing your own view.
   The passed parameters determine the drawing destination aCanvas and the area 
   to redraw aClip in the coordinate space of the canvas. The parameter aOffset 
   contains the displacement between the origin of the views owner and the origin 
   of the canvas. You will need it to convert views coordinates into these of the 
   canvas.
   The parameter aOpacity contains the opacity descended from this view's @Owner. 
   It lies in range 0 .. 255. If the view implements its own 'Opacity', 'Color', 
   etc. properties, the Draw() method should calculate the resulting real opacity 
   by mixing the values of these properties with the one passed in aOpacity parameter.
   The parameter aBlend contains the blending mode descended from this view's @Owner. 
   It determines, whether the view should be drawn with alpha-blending active or 
   not. If aBlend is false, the outputs of the view should overwrite the corresponding 
   pixel in the drawing destination aCanvas. If aBlend is true, the outputs should 
   be mixed with the pixel already stored in aCanvas. For this purpose all Graphics 
   Engine functions provide a parameter to specify the mode for the respective drawing 
   operation. If the view implements its own 'Blend' property, the Draw() method 
   should calculate the resulting real blend mode by using logical AND operation 
   of the value of the property and the one passed in aBlend parameter. */
void CoreSimpleTouchHandler_Draw( CoreSimpleTouchHandler _this, GraphicsCanvas aCanvas, 
  XRect aClip, XPoint aOffset, XInt32 aOpacity, XBool aBlend );

/* The method HandleEvent() is invoked automatically if the view has received an 
   event. For example, touching the view on the touch screen can cause the view 
   to receive a Core::CursorEvent event. Within this method the view can evaluate 
   the event and react to it.
   Whether the event has been handled by the view or not is determined by the return 
   value. To sign an event as handled HandleEvent() should return a valid object 
   (e.g. 'this'). If the event has not been handled, 'null' should be returned.
   Depending on the kind of the event, the framework can continue dispatching of 
   still unhandled events. For example, keyboard events (Core::KeyEvent class) are 
   automatically delivered to the superior @Owner of the receiver view if this view 
   has ignored the event.
   HandleEvent() is invoked automatically by the framework, so you never should 
   need to invoke it directly. However you can prepare and post new events by using 
   the methods DispatchEvent() and BroadcastEvent() of the application class Core::Root. */
XObject CoreSimpleTouchHandler_HandleEvent( CoreSimpleTouchHandler _this, CoreEvent 
  aEvent );

/* The method CursorHitTest() is invoked automatically in order to determine whether 
   the view is interested in the receipt of cursor events or not. This method will 
   be invoked immediately after the user has tapped the visible area of the view. 
   If the view is not interested in the cursor event, the framework repeats this 
   procedure for the next behind view until a willing view has been found or all 
   views are evaluated.
   In the implementation of the method the view can evaluate the passed aArea parameter. 
   It determines the place where the user has tapped the view with his fingertip 
   expressed in the coordinates of the views @Owner. The method can test e.g. whether 
   the tapped area does intersect any touchable areas within the view, etc. The 
   affected finger is identified in the parameter aFinger. The first finger (or 
   the first mouse device button) has the number 0.
   The parameter aStrikeCount determines how many times the same area has been tapped 
   in series. This is useful to detect series of multiple touches, e.g. in case 
   of the double click, aStrikeCount == 2.
   The parameter aDedicatedView, if it is not 'null', restricts the event to be 
   handled by this view only. If aDedicatedView == null, no special restriction 
   exists.
   This method is also invoked if during an existing grab cycle the current target 
   view has decided to resign and deflect the cursor events to another view. This 
   is usually the case after the user has performed a gesture the current target 
   view is not interested to process. Thereupon, the system looks for another view 
   willing to take over the cursor event processing after the performed gesture. 
   Which gesture has caused the operation, is specified in the parameter aRetargetReason.
   If the view is willing to process the event, the method should create, initialize 
   and return a new Core::CursorHit object. This object identify the willing view. 
   Otherwise the method should return 'null'.
   CursorHitTest() is invoked automatically by the framework, so you never should 
   need to invoke it directly. This method is predetermined for the hit-test only. 
   The proper processing of events should take place in the @HandleEvent() method 
   by reacting to Core::CursorEvent and Core::DragEvent events. */
CoreCursorHit CoreSimpleTouchHandler_CursorHitTest( CoreSimpleTouchHandler _this, 
  XRect aArea, XInt32 aFinger, XInt32 aStrikeCount, CoreView aDedicatedView, XSet 
  aRetargetReason );

/* 'C' function for method : 'Core::SimpleTouchHandler.OnSetRetargetOffset()' */
void CoreSimpleTouchHandler_OnSetRetargetOffset( CoreSimpleTouchHandler _this, XInt32 
  value );

/* 'C' function for method : 'Core::SimpleTouchHandler.OnSetMaxStrikeCount()' */
void CoreSimpleTouchHandler_OnSetMaxStrikeCount( CoreSimpleTouchHandler _this, XInt32 
  value );

/* 'C' function for method : 'Core::SimpleTouchHandler.OnSetEnabled()' */
void CoreSimpleTouchHandler_OnSetEnabled( CoreSimpleTouchHandler _this, XBool value );

#ifdef __cplusplus
  }
#endif

#endif /* _CoreSimpleTouchHandler_H */

/* Embedded Wizard */
